
#include <Windows.h>
#include <iostream>
#include <detours.h>  //detours 1.5
using namespace  std;



bool Hook(void * toHook, void * ourFunct, int len){

	if(len < 5){
		return false;
	}

	DWORD curProtection;
	VirtualProtect(toHook,len,PAGE_EXECUTE_READWRITE,&curProtection);

	memset(toHook,0x90,len);

	DWORD relativeAddress = ((DWORD)ourFunct - (DWORD)toHook) -5; 


	*(BYTE*)toHook = 0xE9; 
	*(DWORD*)((DWORD)toHook +1) = relativeAddress;

	DWORD temp;
	VirtualProtect(toHook, len, curProtection, &temp);
	return TRUE;
}




DWORD jmpBackAddy;

void __declspec(naked)ourFunct() {
	int result;
	__asm{
		fld dword ptr [edi+ebp*8]  //instruccion enganchada  la modificamos a nuestro gusto
		fadd dword ptr [esp+28]  //instruccion sobreescrita por el salto, se agrega aqui para evitar que se rompa el programa 
		jmp [jmpBackAddy]	  //salto atras
	}
}

bool unaves = TRUE;

DWORD WINAPI MainThread(LPVOID param){

		int hookLength = 7;   //el tamaÃ±o de los bytes que abarcara nuestra instruccion de salto, incluyendo los sobrantes 
	DWORD hookAddress = 0x006E07C6;   //direccion donde colocaremos  JMP
	jmpBackAddy = hookAddress + hookLength;  //Salto  atras 

	Hook((void*)hookAddress, ourFunct, hookLength);

	while(true){
		if(GetAsyncKeyState(VK_ESCAPE)) break;

	}
		
	FreeLibraryAndExitThread((HMODULE)param,0);
	return 0;
}

BOOL WINAPI DllMain(HINSTANCE hModule, DWORD reason, LPVOID reserved){

	if(reason == DLL_PROCESS_ATTACH){
		CreateThread(0,0,(LPTHREAD_START_ROUTINE)MainThread,hModule,0,0);
	}
	return  TRUE;
}
